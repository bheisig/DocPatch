#!/bin/bash


## DocPatch -- patching documents that matter
## Copyright (C) 2012 Benjamin Heisig <http://benjamin.heisig.name/>
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.


##
## PDF script
##


## About this command
COMMAND_DESC="$COMMAND_PDF"


## Checks wether everything is prepared before creating output.
function checks {
  loginfo "Checking wether everything is prepared before creating output."

  logdebug "Checking output directory..."
  if [ ! -d "$OUTPUT_DIR" ]; then
      logdebug "Output directory not found. Create it."
      "$MKDIR" -p "$OUTPUT_DIR"
      if [ "$?" -gt 0 ]; then
          logwarning "Cannot create output directory under ${OUTPUT_DIR}."
          logerror "Checks failed."
          return 1
        fi
      logdebug "Output directory created under ${OUTPUT_DIR}."
    else
      logdebug "Output directory found in ${OUTPUT_DIR}."
    fi

  logdebug "Checks succeded."
  return 0
}


## Produces PDF file.
##   $1 Revision
function produceOutput {
  loginfo "Producing PDF..."

  logdebug "Checking for any template file..."
  local tpl_option=""
  local tpl_file="${TPL_DIR}/tpl.tex"
  if [ -f "$tpl_file" ]; then
      logdebug "Template file found under ${tpl_file}."
      local tpl_option="--template=$tpl_file"
    else
      logdebug "No template file found under ${tpl_file}."
    fi

  local output_file="${OUTPUT_DIR}/${TITLE}_${1}.pdf"
  logdebug "Producing file..."
  local cmd="$MARKDOWN2PDF --toc $tpl_option --output=$output_file --from=markdown ${REPO_DIR}/*.md"
  logdebug "markdown2pdf: $cmd"
  $cmd
  if [ "$?" -gt 0 ]; then
      logwarning "Cannot produce file ${output_file}."
      logerror "Failed to produce PDF."
      return 1
    fi
  logdebug "Wrote content to file ${output_file}."

  logdebug "PDF produced."
  return 0
}


## Main method
function main {
  # Before work
  preChecks || abort 10

  # Main work
  notice "$COMMAND_DESC"

  checks || abort 12

  countRevisions || abort 13

  determineRepository || abort 14

  determineRevisions || abort 15

  createOutput || abort 16

  # After work
  cleanUp || abort 17
  finishing
}


## Prints command specific options.
function printCommandOptions {
  loginfo "Printing command specific options..."
  prntLn "    -r, --rev, --revision REV\t\tGenerate output from revision REV. 'first', 'last', 'all' and a comma separated list of revisions are allowed. Defaults to 0."
  prntLn "    -R, --repo, --repository REPO\tSelect repository REPO which will be cloned. Defaults to existing repository under ${REPO_DIR}."
  logdebug "Options printed."
  return 0
}
