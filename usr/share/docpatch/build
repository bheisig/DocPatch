#!/bin/bash


## DocPatch -- patching documents that matter
## Copyright (C) 2012 Benjamin Heisig <http://benjamin.heisig.name/>
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.


##
## Build script
##


# TODO convert *.meta (really?!)
# * Wordwrap after 80 chars (except 1. line)
# * copy to $TMP_DIR/*.txt


## About this command
COMMAND_DESC="$COMMAND_BUILD"


## Checks wether everything is prepared before building the repository.
function checks {
  info "Checking wether everything is prepared before building the repository."

  debug "Checking wether repository is already built..."
  if [ -d "$REPO_DIR" ]; then
      warning "Repository is already built."
      error "Checks failed."
      return 1
    fi
  debug "Repository has not been built yet."

  debug "Checks succeeded."
  return 0
}


## Creates a new repository.
function createRepo {
  info "Creating a new repository..."

  debug "Creating directory ${REPO_DIR}..."
  "$MKDIR" -p "$REPO_DIR"
  if [ "$?" -gt 0 ]; then
      warning "Cannot create directory ${REPO_DIR}."
      error "Failed to create a new repository."
      return 1
    fi
  debug "Directory created."

  debug "Changing into directory ${REPO_DIR}..."
  cd "$REPO_DIR"

  debug "Initiating git repository..."
  "$GIT" init
  if [ "$?" -gt 0 ]; then
      warning "Cannot initiate git repository under ${REPO_DIR}."
      error "Failed to create a new repository."
      return 1
    fi

  debug "New repository is created under ${REPO_DIR}."
  return 0
}


## Creates meta information.
function createMetaInformation {
  info "Creating meta information..."

  debug "Copying docpatch configuration file..."
  "$CP" "$DOCPATCH_CONF_SOURCE" "$DOCPATCH_CONF_TARGET"
  if [ "$?" -gt 0 ]; then
      warning "Cannot copy $DOCPATCH_CONF_SOURCE to ${DOCPATCH_CONF_TARGET}."
      error "Failed to create meta information."
      return 1
    fi
  debug "File copied."

  debug "Copying git configuration file..."
  if [ ! -f "$GIT_CONF_SOURCE" ]; then
      notice "Git configuration file under $GIT_CONF_SOURCE is missing. Please consider creating it before building the repository."
    else
      "$CP" "$GIT_CONF_SOURCE" "$GIT_CONF_TARGET"
      if [ "$?" -gt 0 ]; then
          warning "Cannot copy $GIT_CONF_SOURCE to ${GIT_CONF_TARGET}."
          error "Failed to create meta information."
          return 1
        fi
        debug "File copied."
    fi

  debug "Copying git ignore file..."
  if [ ! -f "$GIT_IGNORE_SOURCE" ]; then
      notice "Git ignore file under $GIT_IGNORE_SOURCE is missing. Please consider creating it before building the repository."
    else
      "$CP" "$GIT_IGNORE_SOURCE" "$GIT_IGNORE_TARGET"
      if [ "$?" -gt 0 ]; then
          warning "Cannot copy $GIT_IGNORE_SOURCE to ${GIT_IGNORE_TARGET}."
          error "Failed to create meta information."
          return 1
        fi
        debug "File copied."
    fi

  debug "Converting and copying README file..."
  if [ ! -f "$README_SOURCE" ]; then
      notice "README file under $README_SOURCE is missing. Please consider creating it before building the repository."
    else
      "$PANDOC" --from markdown --to text "$README_SOURCE" > "$README_TARGET"
      if [ "$?" -gt 0 ]; then
          warning "Cannot copy $README_SOURCE to ${README_TARGET}."
          error "Failed to create meta information."
          return 1
        fi
        debug "File copied."
    fi

  debug "Meta information created."
  return 0
}


## Creates intitial version.
function createInitialVersion {
  info "Creating initial version..."

  copyDocuments
  if [ "$?" -gt 0 ]; then
      error "Failed to create initial version."
      return 1
    fi

  debug "Initial version created."
  return 0
}


## Creates all revisions.
function createRevisions {
  info "Creating all revisions..."

  debug "Checking series file..."
  local series_file="${PATCH_DIR}/series"
  if [ ! -f "$series_file" ]; then
      warning "Cannot access series file ${series_file}."
      error "Failed to create all revisions."
      return 1
    fi

  debug "Iterating through each patch..."
  while read patch ; do
      debug "Handling patch ${patch}..."

      debug "Checking patch file..."
      local patch_file="${PATCH_DIR}/$patch"
      if [ ! -f "$patch_file" ]; then
          warning "Cannot access patch file ${patch_file}."
          error "Failed to create all revisions."
          rewindPatches
          return 1
        fi
      debug "Patch file $patch_file is ready to apply."

      debug "Checking message file..."
      local meta_file="${META_DIR}/${patch}.meta"
      if [ ! -f "$meta_file" ]; then
          warning "Cannot access message file ${meta_file}."
          error "Failed to create all revisions."
          rewindPatches
          return 1
        fi

      nextPatch
      if [ "$?" -gt 0 ]; then
          error "Failed to create all revisions."
          rewindPatches
          return 1
        fi

      copyDocuments
      if [ "$?" -gt 0 ]; then
          error "Failed to create all revisions."
          rewindPatches
          return 1
        fi

      local message_head=`"$HEAD" -n1 $meta_file`
      addAndCommitAll "$message_head"
      if [ "$?" -gt 0 ]; then
          error "Failed to create all revisions."
          rewindPatches
          return 1
        fi

      createTag "$patch" "$meta_file"
      if [ "$?" -gt 0 ]; then
          error "Failed to create all revisions."
          rewindPatches
          return 1
        fi

      debug "Finished with patch ${patch}."
    done < "$series_file"
  debug "Each patch applied."

  rewindPatches
  if [ "$?" -gt 0 ]; then
      error "Failed to create all revisions."
      return 1
    fi

  debug "All revisions created."
  return 0
}


## Applies next patch.
function nextPatch {
  info "Applying next patch..."

  debug "Changing into directory ${SRC_DIR}..."
  cd "$SRC_DIR"

  debug "Calling quilt..."
  "$QUILT" push
  if [ "$?" -gt 0 ]; then
      error "Failed to apply next patch."
      return 1
    fi

  debug "Next patch applied."
  return 0
}


## Reverts all applied patches.
function rewindPatches {
  info "Reverting all applied patches..."

  debug "Changing into directory ${SRC_DIR}..."
  cd "$SRC_DIR"

  debug "Calling quilt..."
  "$QUILT" pop -a
  if [ "$?" -gt 0 ]; then
      error "Failed to revert all applied patches."
      return 1
    fi

  debug "All applied patches reverted."
  return 0
}


## Puts all files under version control and commits them.
##   $1 Commit message or file
function addAndCommitAll {
  info "Putting all files under version control and committing them."

  debug "Changing into directory ${REPO_DIR}..."
  cd "$REPO_DIR"

  debug "Putting all files under version control..."
  "$GIT" add * --force
  if [ "$?" -gt 0 ]; then
      warning "Cannot put all files under version control"
      error "Failed to put all files under version control and commit them."
      return 1
    fi
  debug "Putting was successful."

  debug "Checking commit message..."
  if [ -z "$1" ]; then
      warning "There is no commit message."
      error "Failed to put all files under version control and commit them."
      return 1
    fi
  debug "Commit messages seems okay."

  debug "Committing files..."
  if [ -f "$1" ]; then
      debug "Take commit message from ${1}."

      "$GIT" commit -a -F "$1"
      if [ "$?" -gt 0 ]; then
          warning "Cannot commit files."
          error "Failed to put all files under version control and commit them."
          return 1
        fi
    else
      debug "Commit message: ${1}"

      "$GIT" commit -a -m "$1"
      if [ "$?" -gt 0 ]; then
          warning "Cannot commit files."
          error "Failed to put all files under version control and commit them."
          return 1
        fi
    fi
  debug "Commit was successful."

  log "All files put under version control and committed."
  return 0
}


## Tags current revision.
##   $1 Version number
##   $2 Path to message file
function createTag {
  info "Tagging current revision..."

  debug "Checking version number..."
  if [ "$1" -lt 0 ]; then
      warning "Version number is invalid."
      error "Failed to tag current revision."
      return 1
    fi
  debug "Version number: $1"

  debug "Checking message file..."
  if [ ! -f "$2" ]; then
      warning "Cannot access message file."
      error "Failed to tag current revision."
      return 1
    fi
  debug "Message file: $2"

  debug "Changing into directory ${REPO_DIR}..."
  cd "$REPO_DIR"

  local cmd="$GIT tag"

  debug "Check wether tag will be signed..."
  if [ "$SIGN" -eq 1 ]; then
      debug "Tag will be signed."
      cmd="$cmd -s"
    else
      debug "Tag won\'t be signed."
    fi

  cmd="$cmd -F $2 $1"
  debug "git-tag: $cmd"

  debug "Calling git-tag..."
  $cmd
  if [ "$?" -gt 0 ]; then
      warning "Failed to call git-tag."
      error "Failed to tag current revision."
      return 1
    fi
  debug "git-tag succeeded."

  debug "Revision tagged."
  return 0
}


## Counts patches.
## TODO unused code
function countPatches {
  info "Counting patches..."

  PATCHES=`"$CAT" "$PATCH_DIR"/series | "$WC" -l`
  if [ "$?" -gt 0 ]; then
      error "Cannot count patches."
      return 1
    fi

  if [ "$PATCHES" -eq 1 ]; then
      debug "There is 1 patch."
    else
      debug "There are $PATCHES patches."
    fi

  debug "Patches counted."
  return 0
}


## Copies documents from source directory to repository.
function copyDocuments {
  info "Copying documents..."

  debug "Source files: ${SRC_DIR}/*.md"
  debug "Target directory: $REPO_DIR"

  "$CP" "$SRC_DIR"/*.md "$REPO_DIR"
  if [ "$?" -gt 0 ]; then
      error "Failed to copy documents."
      return 1
    fi

  debug "Documents copied."
  return 0
}


## Main method
function main {
  # Before work:
  preChecks || abort 10

  # Main work:
  notice "$COMMAND_DESC"

  checks || abort 11

  createRepo || abort 12

  createMetaInformation || abort 13
  local message="Import meta information."
  addAndCommitAll "$message" || abort 14
  notice "$message"

  createInitialVersion || abort 15
  message="Import initial version."
  addAndCommitAll "$message" || abort 16
  notice "$message"
  createTag "0" "${META_DIR}/0.meta" || abort 17

  createRevisions || abort 18

  # After work:
  cleanUp || abort 19
  finishing
}


## Prints command specific options.
function printCommandOptions {
  info "Printing command specific options..."
  prntLn "    -s, --sign\t\tAdd a OpenPGP signature to commits and tags."
  debug "Options printed."
  return 0
}
