#!/usr/bin/env bash

if [[ -n "$ZSH_VERSION" ]]; then
    emulate bash
fi

## DocPatch -- patching documents that matter
## Copyright (C) 2012-18 Benjamin Heisig <https://benjamin.heisig.name/>
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.


## Installation Directory
PREFIX="/usr/local"

##
## Main script
##


## Start time
START=$(date +%s)

##
## Includes
##

## Include local configuration:
if [ -r "/etc/${PROJECT_NAME}/${PROJECT_NAME}.conf" ]; then
    . /etc/docpatch/"$PROJECT_NAME".conf
fi

## Include user configuration:
if [ -r "~/.${PROJECT_NAME}.conf" ]; then
    . ~/."$PROJECT_NAME".conf
fi

## Include project configuration:
if [ -r "${BASE_DIR}/.${PROJECT_NAME}.conf" ]; then
    . "$BASE_DIR"/."$PROJECT_NAME".conf
fi

## Include default configuration:
if [ ! -r "${PREFIX}/share/docpatch/config.sh" ]; then
    exit 255
fi
. ${PREFIX}/share/docpatch/config.sh

## Include base functions:
if [ ! -r "${PREFIX}/share/${PROJECT_NAME}/${PROJECT_NAME}.sh" ]; then
    exit 255
fi
. ${PREFIX}/share/"$PROJECT_NAME"/"$PROJECT_NAME".sh


##
## Processing
##


## Traps
##   See `man kill` for details.
## Normal exit
trap 'exit 0' 0
## SIGHUB
trap 'lognotice "Caught SIGHUB, but nothing to do."' 1
## SIGINT
trap 'logwarning "Caught SIGINT." ; abort 102' 2
## SIGQUIT
trap 'logwarning "Caught SIGQUIT." ; abort 103' 3
## SIGTERM
trap 'logwarning "Caught SIGTERM." ; abort 115' 15


## Process given options and arguments
loginfo "Process given options and arguments..."
ARGS=`"$GETOPT" \
    -o qvVDhef:r:R:sSt \
    --long help,version,license,embed,embedded,format:,not-smart,output:,rev:,revision:,repo:,repository:,sign,simple,toc,orig-dates,valid-dates -- "$@" 2> /dev/null`

if [ $? != 0 ] || [ "$#" = 0 ]; then
    logwarning "Bad request."
    printUsage
    abort 1;
fi

eval set -- "$ARGS"

logdebug "Processed."


## Match options and arguments
loginfo "Matching options and arguments..."

while true ; do
    case "$1" in
        # Output:
        -q)
        VERBOSITY=$LOG_NONE
        logdebug "Set verbosity: $VERBOSITY"
        shift;;
    -v)
        VERBOSITY=$(($LOG_FATAL | $LOG_ERROR | $LOG_WARNING | $LOG_NOTICE))
        logdebug "Set verbosity: $VERBOSITY"
        shift;;
    -V)
        VERBOSITY=$(($LOG_ALL & ~$LOG_DEBUG))
        logdebug "Set verbosity: $VERBOSITY"
        shift;;
    -D)
        VERBOSITY=$LOG_ALL;
        logdebug "Set verbosity: $VERBOSITY"
        shift;;
        # Information:
        -h|--help)
        logdebug "Set option: Print usage."
        PRINT_USAGE=1;
        shift;;
    --version)
        logdebug "Set option: Print version."
        PRINT_VERSION=1;
        shift;;
    --license)
        logdebug "Set option: Print license."
        PRINT_LICENSE=1;
        shift;;
        # Options:
        -e|--embed|--embedded)
        logdebug "Set option: Create embedded output."
        EMBED=1;
        shift 1;;
    -S|--simple|--not-smart)
        logdebug "Set option: Create simplified output."
        SIMPLE=1;
        shift 1;;
    -f|--format|--output)
        logdebug "Set option: Output format is '${2}'."
        OUTPUT_FORMAT="$2";
        shift 2;;
    -r|--rev|--revision)
        logdebug "Set option: Revision is '${2}'."
        ARG_REVISION="$2";
        shift 2;;
    -R|--repo|--repository)
        logdebug "Set option: Repository is '${2}'."
        REPOSITORY="$2";
        shift 2;;
    -s|--sign)
        logdebug "Set option: Sign tags."
        SIGN=1;
        shift;;
    -t|--toc)
        logdebug "Set option: Create table of contents."
        TOC=1;
        shift;;
    --orig-dates)
        COMMIT_DATES="orig"
        shift;;
    --valid-dates)
        COMMIT_DATES="valid"
        shift;;
    --)
        shift;
        break;;
    *)
        lognotice "Unkown option '${1}'."
        printUsage
        abort 2;;
esac
done

logdebug "Matched."


## Try to match commands with given options
loginfo "Trying to match commands with given options..."

loginfo "Trying to match main command..."
for x in "$@"; do
    for y in "${COMMANDS[@]}"; do
        if [ "$x" == "$y" ]; then
            COMMAND="$x"
            logdebug "Main command is $COMMAND."
            break 2
        fi
    done
done

loginfo "Trying to match sub command..."
if [ -n "$2" ] && [ "$2" != " " ]; then
    SUB_COMMAND="$2"
    logdebug "Sub command is $SUB_COMMAND."
else
    logdebug "There is no sub command."
fi


## Include command specific file
if [ -z "$COMMAND" ]; then
    logdebug "No main command found."
else
    includeCommand "$COMMAND" || abort 3
fi


## Print usage and exit.
if [ "$PRINT_USAGE" -eq 1 ]; then
    printUsage
    finishing
fi


## Print some information about this script and exit.
if [ "$PRINT_VERSION" -eq 1 ]; then
    printVersion
    finishing
fi


## Print some information about this script and exit.
if [ "$PRINT_LICENSE" -eq 1 ]; then
    printLicense
    finishing
fi


## Apply nice level
applyNiceLevel || abort 4


## Call command specific main method
if [ -z "$COMMAND" ]; then
    lognotice "Nothing to do."
    printUsage
    abort 5
else
    # Before work
    if [ "$COMMAND" != "help" ]; then
        preChecks || abort 5

        lognotice "$COMMAND_DESC"
    fi

    # Main work
    main

    # After work
    finishing
fi
